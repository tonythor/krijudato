---
title: "Flood Risk in NYC: A Product for Insurance Professionals"
author: "Team Krijudato (Kristin L, Julia F, David G, Tony F)"
date: "December 10, 2023"
format:
  html:
    theme: cosmo
    toc: true
    number_sections: true
---

## Introduction

According to [Swiss Re](https://www.swissre.com/risk-knowledge/risk-perspectives-blog/challenge-of-understanding-secondary-perils.html), flooding is classified as a secondary peril, posing greater modeling challenges compared to hurricanes and earthquakes. The unpredictability of flood occurrences, both in terms of timing and location, adds to the complexity. The limited adoption of flood catastrophe models by insurance professionals can be attributed to these difficulties. Current flood catastrophe models do not have a high degree of confidence, as U.S. flood models are still in their infancy.

The product we've created proves valuable for insurance professionals by offering insights into the locations outlined in a schedule of values. While it doesn't fall under the category of a catastrophe model, it furnishes valuable information. This information aids insurance professionals, including underwriters and actuaries, in making well-informed decisions regarding the provision of flood insurance for individuals, groups, companies, or government entities.

## As a Product

This section explains where in the product development life cycle this product currently stands.

### Genesis: Class Project to Product

Our team initiated this project by exploring numerous publicly available NYC datasets. After extensive discussions, we collectively decided to transform our final class project into a product roadmap and a startup idea. This document marks the beginning of that journey. It serves as our running Proof of Concept (POC) for a new Software as a Service (SaaS) product.

There's a wealth of free information provided by the City of New York, ripe for businesses to leverage. Navigating this data is not straightforward, given the various ways of describing geographic data, such as block IDs, zone IDs, addresses, grid coordinates, etc. However, mastering this allows for the creation of an elegant and integrated information symphony.

### Phase 1: POC (Completed)

This phase involved our initial end-to-end process to ensure data linkability.

1.  Compile a list of precisely formatted addresses (for our demo, we used all CUNY campuses).
2.  Look up these addresses in the NYC "master" address API system to obtain primary keys and grid coordinates for linking to other systems.
3.  Cross-reference these addresses with a major NYC Dataset, Pluto.
4.  Merge this data with Pluto and filter it to focus on insurance data.
5.  Implement an underlying polygon system, akin to outlining zip codes on a map.
6.  Determine if the target element (i.e., the CUNY address) falls within the specified polygon.

### Phase 2: Alpha - The Working Product

The alpha version needs to operate in a more real-time manner, such as uploading a spreadsheet of addresses and receiving output instantly.

To progress from POC to alpha release, we need to add:

1.  A database, such as Postgres Aurora.
2.  A modern authentication system.
3.  A method for correcting ambiguous addresses (e.g., "W 4th St" - is it West 4th Street?). NYC offers an API for this.
4.  A web framework to facilitate CSV uploads into the system.
5.  A display mechanism for output, which will be in HTML format, with one HTML file generated per run.
6.  Integration of the runtime R code with AWS Lambda.

### Future Development

Once the foundational elements are operational, we plan to incorporate additional datasets, such as crime statistics, school literacy rates, and building and fire code violations.

```{r, warning = FALSE, message = FALSE, echo = FALSE, show = FALSE, output = FALSE}
library(tidyverse)
library(scales)
library(dplyr)
library(gt)
library(leaflet)
library(htmltools)
library(mapview)
library(sf)
library(gt)
library(readr)
library(data.table)

options(scipen=999)

joined_pluto_path <- "./nogit_cache/_joined_pluto.csv"
pluto_path <- "./nogit_cache/_pluto_23v3.csv"

if (!file.exists(joined_pluto_path)) {
  source('./nycfun.r')
}

## load the cache
joined_pluto <- read_csv(joined_pluto_path) %>% 
  mutate(pfirm15_flag = coalesce(pfirm15_flag, 0))

```

## Raw Product Demonstration

```{r mapcode, warning = FALSE,  echo = FALSE}
pluto <- read_csv(pluto_path, show_col_types = FALSE) %>%
  mutate(flood_zone = ifelse(pfirm15_flag == 0 | is.na(pfirm15_flag), "Not in Flood Zone", "1% Annual Flood Plain"),
         basement = ifelse(bsmtcode == 0 | is.na(bsmtcode), "No Basement", "Basement"))

dfbrklyn<-filter(pluto,borocode=='3', pfirm15_flag ==1)
dfqueens<-filter(pluto,borocode=='4', pfirm15_flag ==1)
dfbronx<-filter(pluto,borocode=='2', pfirm15_flag ==1)
dfmanhattan<-filter(pluto,borocode=='1', pfirm15_flag ==1)
dfstaten<-filter(pluto,borocode=='5', pfirm15_flag ==1)

## change sample count before knitting 
samplecount <- 200

df_sample_Brooklyn<-sample_n(dfbrklyn,samplecount)
df_sample_Queens<-sample_n(dfqueens,samplecount)
df_sample_Bronx<-sample_n(dfbronx,samplecount)
df_sample_manhattan<-sample_n(dfmanhattan,samplecount)
df_sample_staten<-sample_n(dfstaten,samplecount)


df_sample_Brooklyn_flood<- df_sample_Brooklyn %>%
  mutate(Brooklyn_Data= paste(
  "<b>Building Area: <b>", comma(bldgarea), "<br>",
  "<b>Lot Area: <b>", comma(lotarea), "<br>",
  "<b>Total Number of Units: <b>",unitstotal, "<br>",
  "<b>Number of Buildings: <b>", numbldgs, "<br>",
  "<b>Number of Floors: <b>", numfloors, "<br>",
  "<b>Assessed Total: <b>", dollar(assesstot), "<br>",
  "<b>Flood Zone: <b>", flood_zone, "<br>",
  "<b>Year Built: <b>", yearbuilt, "<br>",
  "<b>Basement: <b>", basement, "<br>",
  "<b>Location: <b>",address))%>%mutate(County=paste("Kings County"))

df_sample_Queens_flood<- df_sample_Queens %>%
  mutate(Queens_Data= paste(  
  "<b>Building Area: <b>", comma(bldgarea), "<br>",
  "<b>Lot Area: <b>", comma(lotarea), "<br>",
  "<b>Total Number of Units: <b>",unitstotal, "<br>",
  "<b>Number of Buildings: <b>", numbldgs, "<br>",
  "<b>Number of Floors: <b>", numfloors, "<br>",
  "<b>Assessed Total: <b>", dollar(assesstot), "<br>",
  "<b>Flood Zone: <b>", flood_zone, "<br>",
  "<b>Year Built: <b>", yearbuilt, "<br>",
  "<b>Basement: <b>", basement, "<br>",
  "<b>Location: <b>",address))%>%mutate(County=paste("Queens County"))

df_sample_Bronx_flood<- df_sample_Bronx %>%
  mutate(Bronx_Data= paste(  
  "<b>Building Area: <b>", comma(bldgarea), "<br>",
  "<b>Lot Area: <b>", comma(lotarea), "<br>",
  "<b>Total Number of Units: <b>",unitstotal, "<br>",
  "<b>Number of Buildings: <b>", numbldgs, "<br>",
  "<b>Number of Floors: <b>", numfloors, "<br>",
  "<b>Assessed Total: <b>", dollar(assesstot), "<br>",
  "<b>Flood Zone: <b>", flood_zone, "<br>",
  "<b>Year Built: <b>", yearbuilt, "<br>",
  "<b>Basement: <b>", basement, "<br>",
  "<b>Location: <b>",address))%>%mutate(County=paste("Bronx County"))

df_sample_manhattan_flood<- df_sample_manhattan %>%
  mutate(Manhattan_Data= paste(
  "<b>Building Area: <b>", comma(bldgarea), "<br>",
  "<b>Lot Area: <b>", comma(lotarea), "<br>",
  "<b>Total Number of Units: <b>",unitstotal, "<br>",
  "<b>Number of Buildings: <b>", numbldgs, "<br>",
  "<b>Number of Floors: <b>", numfloors, "<br>",
  "<b>Assessed Total: <b>", dollar(assesstot), "<br>",
  "<b>Flood Zone: <b>", flood_zone, "<br>",
  "<b>Year Built: <b>", yearbuilt, "<br>",
  "<b>Basement: <b>", basement, "<br>",
  "<b>Location: <b>",address))%>%mutate(County=paste("New York County"))

df_sample_staten_flood<- df_sample_staten %>%
  mutate(Staten_Island_Data= paste(
  "<b>Building Area: <b>", comma(bldgarea), "<br>",
  "<b>Lot Area: <b>", comma(lotarea), "<br>",
  "<b>Total Number of Units: <b>",unitstotal, "<br>",
  "<b>Number of Buildings: <b>", numbldgs, "<br>",
  "<b>Number of Floors: <b>", numfloors, "<br>",
  "<b>Assessed Total: <b>", dollar(assesstot), "<br>",
  "<b>Flood Zone: <b>", flood_zone, "<br>",
  "<b>Year Built: <b>", yearbuilt, "<br>",
  "<b>Basement: <b>", basement, "<br>",
  "<b>Location: <b>",address))%>%mutate(County=paste("Richmond County"))

sample_colleges <- joined_pluto %>%
  mutate(flood_zone = ifelse(pfirm15_flag == 0 | is.na(pfirm15_flag), "Not in Flood Zone", "1% Annual Flood Plain"),
    basement = ifelse(bsmtcode == 0 | is.na(bsmtcode), "No Basement", "Basement")) %>%
  mutate(colleges_data = paste("<b>College: <b>", location_name, "<br>",
  "<b>Building Area: <b>", comma(bldgarea), "<br>",
  "<b>Lot Area: <b>", comma(lotarea), "<br>",
  "<b>Total Number of Units: <b>",unitstotal, "<br>",
  "<b>Number of Buildings: <b>", numbldgs, "<br>",
  "<b>Number of Floors: <b>", numfloors, "<br>",
  "<b>Assessed Total: <b>", dollar(assesstot), "<br>",
  "<b>Flood Zone: <b>", flood_zone, "<br>",
  "<b>Year Built: <b>", yearbuilt, "<br>",
  "<b>Basement: <b>", basement, "<br>",
  "<b>Location: <b>", address))

# filter na's 
df_sample_staten_flood <- df_sample_staten_flood[complete.cases(df_sample_staten_flood$longitude, df_sample_staten_flood$latitude), ]

m_df_sample_staten_flood<-mapview(df_sample_staten_flood,crs = 4269,  xcol = "longitude", ycol = "latitude",zcol="County", legend = TRUE, popup="Staten_Island_Data", grid = FALSE, layer.name = "Richmond County", col.regions = "red")

# filter na's 
df_sample_manhattan_flood <- df_sample_manhattan_flood[complete.cases(df_sample_manhattan_flood$longitude, df_sample_manhattan_flood$latitude), ]

m_df_sample_manhattan_flood<-mapview(df_sample_manhattan_flood,crs = 4269,  xcol = "longitude", ycol = "latitude", zcol="County",popup="Manhattan_Data",legend = TRUE,  grid = FALSE, layer.name = "New York County", col.regions = "green")

m_df_sample_Bronx_flood<-mapview(df_sample_Bronx_flood,crs = 4269,  xcol = "longitude", ycol = "latitude",zcol="County", legend = TRUE, popup="Bronx_Data",grid = FALSE, layer.name = "Bronx County", col.regions = "blue" )

m_df_sample_Queens_flood<-mapview(df_sample_Queens_flood,crs = 4269,  xcol = "longitude", ycol = "latitude",zcol="County", legend = TRUE, popup="Queens_Data",grid = FALSE, layer.name = "Queens County", col.regions = "orange" )

m_df_sample_Brooklyn_flood<-mapview(df_sample_Brooklyn_flood,crs = 4269,  xcol = "longitude", ycol = "latitude",zcol="County", legend = TRUE, popup="Brooklyn_Data", grid = FALSE, layer.name = "Kings County", col.regions = "yellow")

sample_colleges <- sample_colleges[complete.cases(sample_colleges$longitude, sample_colleges$latitude), ]

colleges <- mapview(sample_colleges, crs = 4269, xcol = "longitude", ycol = "latitude", zcol = "type", legend = TRUE, popup = "colleges_data", grid = FALSE, layer.name = "Colleges in NYC", col.regions = c("black", "gray", "white"))

# This file comes from this website: https://data.cityofnewyork.us/Environment/Floodplain/g62a-qs52
# To get to the file, go to Export, Download, Download a non-geospatial file type, CSV
# Save to your default directory
polygonFile <- read_csv("polygonData", show_col_types = FALSE)

polygonFile <- polygonFile |> filter(Shape_Area >= 1)

geometry1 <- strsplit(polygonFile$the_geom, split = ",")
geometry2 <- str_split(geometry1, ",")
geometry3 <- lapply(geometry2, as.data.frame)

df2 <- c()

for (i in 1:nrow(polygonFile))
{
  df1 <- data.frame(XY = geometry3[[i]], num = rep(i, each = nrow(geometry3[[i]])))
  df2 <- rbind(df1, df2)
}

df2$`X..i..` <- gsub('c\\(\\"MULTIPOLYGON \\(\\(\\(', "", df2$`X..i..`)
df2$X..i.. <- gsub('\\)\\)\\)\\"\\)', '', df2$X..i..)
df2$X..i.. <- gsub('\\"', '', df2$X..i..)
df2$X..i.. <- gsub('\\\n', '', df2$X..i..)
df2$X..i.. <- gsub(' 4', ' 44', df2$X..i..)
df2$X..i.. <- gsub('\\(', '', df2$X..i..)
df2$X..i.. <- gsub('\\)', '', df2$X..i..)


df2[c('long', 'lat')] <- str_split_fixed(df2$X..i.., ' 4', 2)
df2 <- df2[,-1]

projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
myCoords <- st_as_sf(x = df2,
                     coords = c("long", "lat"),
                     crs = projcrs)

polys <- st_sf(
  aggregate(
    myCoords$geometry,
    list(myCoords$num),
    function(g){
       st_cast(st_combine(g),"POLYGON")
    }
   ))

polys$Group.1 <- polygonFile$TARGET_FID
polys <- rename(polys, Group = Group.1)
polys$Field_Zone <- polygonFile$FLD_ZONE
polys$Polygon_Area <- polygonFile$Shape_Area


polygons1 <- mapview(polys, zcol = "Field_Zone", legend = TRUE, grid = FALSE, layer.name = "Flood Zone Polygons")

m_df_sample_Brooklyn_flood+m_df_sample_Queens_flood+m_df_sample_Bronx_flood+m_df_sample_manhattan_flood+m_df_sample_staten_flood + colleges + polygons1
```

------------------------------------------------------------------------

------------------------------------------------------------------------

## Demonstration for Insurance Professionals

In our demonstration, we are using the schedule of values for the City University of New York (CUNY).

### Schedule of Values: Mapped

This map offers a comprehensive overview of all locations listed in a schedule of values. The hover-over feature provides additional property details, with a key focus on whether the property is situated in a flood zone.

```{r, message = FALSE, warning = FALSE, echo = FALSE, show = FALSE}
colleges + polygons1
```

### Overview: CUNY Property Values

```{r value-overview, fig.height=6, fig.width = 10, show = FALSE, echo = FALSE}
joined_pluto_sorted <- joined_pluto %>%
  arrange(desc(property_value))

joined_pluto_sorted %>%
  ggplot(aes(x = reorder(location_name, property_value), y = property_value, fill = as.factor(pfirm15_flag))) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = dollar_format(prefix = "$", suffix = "", big.mark = ",", decimal.mark = ".", accuracy = 1)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(x = "Location Name", y = "Property Value", title = "Property Value by Location") +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(
    values = c("0" = "lightgreen", "1" = "indianred"),
    name = "Flood Zone Risk",
    labels = c("No Risk", "Flood Plain")
  )
```

### Property Value by Flood Zone

```{r value-by-flood-zone, message = FALSE, warning = FALSE, echo = FALSE, show = FALSE, fig.align="center"}
# property value per flood zone
joined_pluto_sorted %>%
  group_by(pfirm15_flag) %>%
  summarize(total_assesstot = sum(assesstot, na.rm = TRUE)) %>%
  ggplot() +
  geom_bar(aes(x = factor(pfirm15_flag), y = total_assesstot, fill = factor(pfirm15_flag)), stat = "identity", position = "dodge") +
  geom_text(aes(x = factor(pfirm15_flag), y = total_assesstot, label = comma_format()(total_assesstot)),
            position = position_dodge(width = 0.9),
            vjust = -0.5, size = 3) +
  labs(title = "Total Values by Flood Risk Type",
       x = "",
       y = "Total Values") +
  scale_x_discrete(labels = c("0" = "No Flood Risk", "1" = "1% Annual Chance Flood Plain")) +
  scale_y_continuous(labels = comma_format(), breaks = seq(0, 2000000000, by = 250000000)) +
  scale_fill_manual(values = c("0" = "lightgreen", "1" = "indianred"), 
                    name = "Flood Zone Risk", labels = c("No Flood Risk", "1% Annual Chance Flood Plain")) +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold", hjust = 0.5),
        legend.title = element_text(face = "bold", hjust = 0.5))
```

### Risk Scoring

Risk scores can prove to be a useful tool for underwriters to determine the complexity of the flood risk for the schedule. We've developed a risk scoring system that is assigned as follows:

-   Properties *not* in a flood zone and *without* a basement receive a risk score of **0**.
-   Properties *not* in a flood zone but *with* a basement are assigned a risk score of **1**.
-   Properties *in* a flood zone and *without* a basement are given a risk score of **2**.
-   Properties *in* a flood zone and *with* a basement receive a risk score of **3**.

```{r risk-score, message = FALSE, warning = FALSE, echo = FALSE, show = FALSE, fig.align="center"}
risky_prop_flood <- joined_pluto_sorted %>%
  mutate(
    riskscore = case_when(
      pfirm15_flag == 1 & (!is.na(bsmtcode) | bsmtcode != 0) ~ 3,
      pfirm15_flag == 1 & (is.na(bsmtcode) | bsmtcode == 0) ~ 2,
      pfirm15_flag == 0 & (!is.na(bsmtcode) | bsmtcode != 0) ~ 1,
      pfirm15_flag == 0 & (is.na(bsmtcode) | bsmtcode == 0) ~ 0,
      TRUE ~ NA_real_
    )
  ) %>%
  select(location_name, street_number, city, state, zip, borough.x, riskscore, assesstot)


ggplot(data = risky_prop_flood) +
  geom_bar(aes(x = riskscore, fill = as.factor(riskscore))) +
  labs(
    title = "Distribution of Risk Scores",
    x = "Risk Score",
    y = "Count"
  ) +
  scale_y_continuous(breaks = seq(0, max(table(risky_prop_flood$riskscore)), by = 5)) +
  scale_fill_manual(values = c("darkolivegreen2", "gold1", "sienna1", "firebrick"),
                    breaks = c(0, 1, 2, 3),
                    labels = c("0", "1", "2", "3"),
                    name = "Risk Score") +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5)
  )

```

### Summary of Values by Risk Score

```{r values-by-risk-score, warning = FALSE, message = FALSE, echo = FALSE, show = FALSE, fig.align="center"}
summary_data <- risky_prop_flood %>%
  group_by(riskscore) %>%
  summarize(total_assesstot = sum(assesstot, na.rm = TRUE)) %>%
  rename("New Name for Total Assesstot" = total_assesstot,
         "Risk Score" = riskscore)

summary_data %>%
  gt() %>%
  cols_label("Risk Score" = md("**Risk Score**"),
             "New Name for Total Assesstot" = md("**Values**")) %>%
  tab_header(
    title = md("**Summary of Values by Risk Score**")
  ) %>%
  fmt_currency(columns = c("New Name for Total Assesstot"), currency = "USD")
```

## Conclusion

We are confident that our product serves as a valuable tool for insurance professionals. By utilizing provided schedules of values, our product generates detailed maps and charts that analyze flood risk and offer additional property insights. These resources empower insurance professionals to make informed decisions on flood insurance risk and coverage. Our aim is to enhance the decision-making process, ultimately contributing to more effective risk management strategies.

## Future Improvements

Improving this product in the future may entail incorporating data at the national level and potentially expanding it globally. However, challenges arise when applying it nationally and globally due to varying levels of detail in flood information from different countries and regions.

Another improvement would be to add another data source that provides building construction. The type of construction can significantly impact the extent of losses in the event of a flood. Assessing the materials and design of structures would help insurance professionals estimate potential damage and calculate appropriate coverage.

Additionally, future iterations of the product could benefit from the incorporation of:

-   building code violations
-   fire code violations
-   flood history

These enhancements would contribute to a more comprehensive tool, providing insurance professionals with a nuanced understanding of properties and facilitating more accurate risk assessments.

## Sources

[PLUTO](https://geoservice.planning.nyc.gov)

[Flood Plain NYC Open Data](https://data.cityofnewyork.us/Environment/Floodplain/g62a-qs52)

[Challenge of Understanding Secondary Perils](https://www.swissre.com/risk-knowledge/risk-perspectives-blog/challenge-of-understanding-secondary-perils.html)
